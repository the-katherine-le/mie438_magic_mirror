#include <WiFi.h>
#include "time.h"

#include <HTTPClient.h>
#include <ArduinoJson.h>

#include <TFT_eSPI.h>  // Graphics and font library for ILI9341 driver chip
#include <SPI.h>

#include <FastLED.h>

TFT_eSPI tft = TFT_eSPI();  // Invoke library

//Comment here your wifi/hotspot credentials for personal testing
const char *ssid = "John Doe's iPhone";
const char *password = "password";

const char *ntpServer = "pool.ntp.org";

// WEATHER VARIABLES
// Your Domain name with URL path or IP address with path
// Replace with unique API key
const String openWeatherMapApiKey = "477dd289768ed286827eeb432969043c";

// Replace with your country code and city
const String city = "Toronto";
const String countryCode = "CA";

// THE DEFAULT TIMER IS SET TO 10 SECONDS FOR TESTING PURPOSES
// For a final application, check the API call limits per hour/minute to avoid getting blocked/banned
unsigned long lastTime = 0;

//TO DO: set timer to an hourly interval instead to not exceed API Call limit, timerDelay = 3600*1000
// Set timer to 10 seconds (10000)
unsigned long timerDelay = 3600000;
bool initWeatherQuery = false;

float temp;
float feels_like;
int humidity;

String s_temp;
String s_feelslike;
String s_humidity;

bool firstWeatherUpdate = false;

// LED STRIP VARIABLES
#define NUM_LEDS 27
#define DATA_PIN 16
CRGB leds[NUM_LEDS];
int brightness = 30;
bool brightnessUp = true;
bool increase = true;
int r = 250;
int g = 250;
int b = 250;

// TOUCH SENSOR VARIABLES
int touchPin;
int threshold = 30;
int touchCount = 0;
bool tap = false;
bool hold = false;

// SOUND SENSOR VARIABLES
int soundPin = 34;
int soundLevel;
int clapThreshold = 700;

// TIME AND DATE VARIABLES
const long gmtOffset_sec = -18000;  // defines the offset in seconds between our time zone (EST) and GMT // EST is 5 hours behind, so the offset is 5*3600= -18000 seconds
const int daylightOffset_sec = 3600;
String hour, minute, weekDay, month, monthDay, year;
int prevMinute;

// QUOTE VARIABLES
String quote, author;

// TIMER VARIABLES
int unit_time;
int seconds = 30;
int sec;
int mins;
unsigned long startT;
unsigned long currT;
int secondsPrev;
int userTime;
String minStr, secStr;

// UPDATE BOOLEANS
bool updateTimeScreen = true;
bool updateQuoteScreen;
bool timerDone = false;
bool firstUpdate = true;

int currentScreen = 0;

void setup() {
  Serial.begin(115200);
  pinMode(soundPin, INPUT);

  tft.init();
  tft.setRotation(1);

  FastLED.addLeds<WS2813, DATA_PIN, GRB>(leds, NUM_LEDS);

  // Connect to Wi-Fi
  Serial.print("Connecting to: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  WiFi.mode(WIFI_STA);  // for iPhone

  while (WiFi.status() != WL_CONNECTED) {
    delay(10);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");

  // Init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  getLocalTime(hour, minute, weekDay, month, monthDay, year);  // get time and date information
  getQuote(quote, author);  // print quote
  displayTimeScreen();
}

void loop() {
  soundLevel = analogRead(soundPin);
  //Serial.println(soundLevel);

  if (WiFi.status() == WL_CONNECTED) {

    timerDone = false;

    if (soundLevel > clapThreshold && currentScreen == 3) {  // TIME AND DATE SCREEN
      currentScreen = 0;
      delay(10);
      getLocalTime(hour, minute, weekDay, month, monthDay, year);
      Serial.print("time screen");

      //Serial.print("new minute: ");
      //Serial.println(minute.toInt());

      if (prevMinute != minute.toInt()) {
        updateTimeScreen = true;
      }
      if (updateTimeScreen == true) {
        displayTimeScreen();
        updateTimeScreen = false;
      }
      prevMinute = minute.toInt();
      //Serial.print("prev minute: ");
      //Serial.println(prevMinute);



    } else if (soundLevel > clapThreshold && currentScreen == 0) {  // QUOTE SCREEN
      currentScreen = 1;
      delay(10);
      getQuote(quote, author);  // print quote

    } else if (soundLevel > clapThreshold && currentScreen == 1) {  // TIMER SCREEN
      currentScreen = 2;
      delay(10);
      
      timer();
      firstUpdate = true;

    } else if (soundLevel > clapThreshold && currentScreen == 2) {  // WEATHER SCREEN
      currentScreen = 3;
      delay(10);

      if (firstWeatherUpdate == false) {
        Serial.println("Getting weather data...");
        getWeather(temp, feels_like, humidity);

        s_temp = String(temp);
        s_feelslike = String(feels_like);
        s_humidity = String(humidity);

        drawWeather(s_temp, s_feelslike, s_humidity);

        firstWeatherUpdate = true;
      }

      if ((millis() - lastTime) > timerDelay) {
        Serial.println("Getting weather data...");
        getWeather(temp, feels_like, humidity);

        s_temp = String(temp);
        s_feelslike = String(feels_like);
        s_humidity = String(humidity);

        //update the screen ONLY when there is a weather update!
        drawWeather(s_temp, s_feelslike, s_humidity);

        lastTime = millis();  //Just keep incrementing the timer
      }

      Serial.print("weather screen");
      
    }

    ledControl();
  }
}

void getLocalTime(String &hour, String &minute, String &weekDay, String &month, String &monthDay, String &year) {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }

  hour = String(timeinfo.tm_hour);
  minute = String(timeinfo.tm_min);
  month = String(timeinfo.tm_mon);
  monthDay = String(timeinfo.tm_mday);
  weekDay = String(timeinfo.tm_wday);
  year = String(1900 + int(timeinfo.tm_year));

  // Week Day
  if (weekDay == "0") {
    weekDay = "Sunday";
  } else if (weekDay == "1") {
    weekDay = "Monday";
  } else if (weekDay == "2") {
    weekDay = "Tuesday";
  } else if (weekDay == "3") {
    weekDay = "Wednesday";
  } else if (weekDay == "4") {
    weekDay = "Thursday";
  } else if (weekDay == "5") {
    weekDay = "Friday";
  } else if (weekDay == "6") {
    weekDay = "Saturday";
  }

  // Month
  if (month == "0") {
    month = "January";
  } else if (month == "1") {
    month = "February";
  } else if (month == "2") {
    month = "March";
  } else if (month == "3") {
    month = "April";
  } else if (month == "4") {
    month = "May";
  } else if (month == "5") {
    month = "June";
  } else if (month == "6") {
    month = "July";
  } else if (month == "7") {
    month = "August";
  } else if (month == "8") {
    month = "September";
  } else if (month == "9") {
    month = "October";
  } else if (month == "10") {
    month = "November";
  } else if (month == "11") {
    month = "December";
  }

  if (minute.toInt() < 10) {
    minute = "0" + minute;
  }
}

void displayTimeScreen() {
  tft.fillScreen(TFT_BLACK);

  // Set "cursor" at top left corner of display (0,0) and select font 2
  // (cursor will move to next line automatically during printing with 'tft.println'
  //  or stay on the line is there is room for the text with tft.print)
  tft.setCursor(60, 60, 2);                // 240 x 320
  tft.setTextColor(TFT_WHITE, TFT_BLACK);  // Set the font colour to be white with a black background, set text size multiplier to 1
  tft.setTextSize(6);
  tft.print(hour + ":" + minute);

  tft.println();

  tft.setCursor(90, 150, 2);  // 240 x 320
  tft.setTextSize(1);
  tft.println(weekDay + ", " + month + " " + monthDay + " " + year);
}

String getURLResponse(String url) {
  HTTPClient http;
  String jsonstring = "";
  //Serial.println("getting url: " + url);
  if (http.begin(url)) {
    Serial.print("[HTTP] GET...\n");
    // start connection and send HTTP header
    int httpCode = http.GET();

    // httpCode will be negative on error
    if (httpCode > 0) {
      // HTTP header has been sent and Server response header has been handled
      Serial.println("[HTTP] GET... code: " + String(httpCode));

      // file found at server
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
        jsonstring = http.getString();
      }
    } else {
      Serial.println("[HTTP] GET... failed, error: " + http.errorToString(httpCode));
    }
    http.end();
  } else {
    Serial.println("[HTTP] Unable to connect");
  }
  return jsonstring;
}

void getQuote(String &quote, String &author) {
  StaticJsonDocument<1024> doc;
  String url = "https://www.adafruit.com/api/quotes.php";
  String jsonquote = getURLResponse(url);
  if (jsonquote.length() > 0) {
    // remove start and end brackets, jsonBuffer is confused by them
    jsonquote = jsonquote.substring(1, jsonquote.length() - 1);
    //Serial.println("using: " + jsonquote);
    DeserializationError error = deserializeJson(doc, jsonquote);
    if (error) {
      //Serial.println("json parseObject() failed");
      //Serial.println("bad json: " + jsonquote);
      quote = "json parseObject() failed";
    } else {
      String tquote = doc["text"];
      String tauthor = doc["author"];
      quote = tquote;
      author = tauthor;

      tft.fillScreen(TFT_BLACK);
      tft.setCursor(0, 50, 2);  // 240 x 320
      tft.setTextColor(TFT_WHITE, TFT_BLACK);
      tft.setTextSize(2);
      String fullText;
      fullText = quote + " (" + author + ")";
      //tft.println(fullText);
      printSplitString(fullText);
    }
  } else {
    quote = "Error retrieving URL";
  }
}

void printSplitString(String text) {
  int wordStart = 0;
  int wordEnd = 0;
  while ((text.indexOf(' ', wordStart) >= 0) && (wordStart <= text.length())) {
    wordEnd = text.indexOf(' ', wordStart + 1);
    uint16_t len = tft.textWidth(text.substring(wordStart, wordEnd));
    if (tft.getCursorX() + len >= tft.width()) {
      tft.println();
      if (wordStart > 0) wordStart++;
    }
    tft.print(text.substring(wordStart, wordEnd));
    wordStart = wordEnd;
  }
}

void timer() {
  FastLED.setBrightness(30);
  fill_solid(leds, NUM_LEDS, CRGB::White);
  FastLED.show();
  mins = seconds / 60;
  sec = seconds - mins * 60;

  if (firstUpdate == true) {
    updateTimerScreen(mins, sec);
    firstUpdate = false;
  }

  while(timerDone == false){
      // TAP OR HOLD?
    if (touchRead(33) < threshold) {
      delay(1000);
      if (touchRead(33) < threshold) {
        hold = true;
      } else {
        tap = true;
      }
    }

    // TAP -> START COUNTDOWN
    if (tap == true) {  //count down
      unit_time = seconds / 27;
      userTime = seconds;

      startT = millis();
      while (seconds > 0) {
        currT = millis();
        seconds = userTime - int((currT - startT) / 1000);
        //Serial.println(seconds);

        if (secondsPrev != seconds) {
          mins = seconds / 60;
          sec = seconds - mins * 60;
          updateTimerScreen(mins, sec);
        }

        for (int i = 26; i > 0; i--) {  // turn off LEDs one by one
          if (seconds * 100 < unit_time * i * 100) {
            leds[i] = CRGB::Black;
            FastLED.show();
          }
        }
        if (seconds == 0) {
          for (int j = 0; j <= 3; j++) {  // flash LEDs 3 times
            fill_solid(leds, NUM_LEDS, CRGB::White);
            FastLED.show();
            delay(500);

            fill_solid(leds, NUM_LEDS, CRGB::Black);
            FastLED.show();
            delay(500);
          }
        }
        secondsPrev = seconds;
      }
      // RESET EVERYTHING
      tap = false;
      seconds = 30;
      timerDone = true;
    }

    // HOLD -> INCREASE TIME
    else if (hold == true && increase == true) { 
      while (touchRead(33) < threshold && seconds < 300) {
        seconds += 15;
        delay(1000);

        mins = seconds / 60;
        sec = seconds - mins * 60;
        updateTimerScreen(mins, sec);

        //Serial.println(seconds);
      }
      increase = false;
      hold = false;
    }

    // HOLD -> DECREASE TIME
    else if (hold == true && increase == false) { 
      while (touchRead(33) < threshold && seconds > 15) {
        seconds -= 15;
        delay(1000);

        mins = seconds / 60;
        sec = seconds - mins * 60;
        updateTimerScreen(mins, sec);

        //Serial.println(seconds);
      }
      increase = true;
      hold = false;
    }
  }
}

void updateTimerScreen(int mins, int sec) {
  minStr = String(mins);
  secStr = String(sec);
  if (sec < 10) {
    secStr = "0" + String(sec);
  }
  // Fill screen with black
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(60, 60, 2);                // Set "cursor" at top left corner of display (0,0) and select font type
  tft.setTextColor(TFT_WHITE, TFT_BLACK);  // Set the font colour to be white with a black background, set text size multiplier to 1
  tft.setTextSize(6);
  tft.print(minStr + ":" + secStr);  // print time to screen 1

  Serial.println(minStr + ":" + secStr);
}

void getWeather(float &temp, float &feels_like, int &humidity) {
  StaticJsonDocument<80> filter;

  JsonObject filter_main = filter.createNestedObject("main");
  filter_main["temp"] = true;
  filter_main["humidity"] = true;
  filter_main["feels_like"] = true;

  JsonObject filter_weather_0 = filter["weather"].createNestedObject();
  filter_weather_0["main"] = true;
  filter_weather_0["description"] = true;
  filter["wind"]["speed"] = true;

  StaticJsonDocument<192> doc;

  String url = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "," + countryCode + "&APPID=" + openWeatherMapApiKey + "&units=metric";
  String jsonWeather = getURLResponse(url);

  if (jsonWeather.length() > 0) {
    Serial.println("using: " + jsonWeather);

    DeserializationError error = deserializeJson(doc, jsonWeather, DeserializationOption::Filter(filter));
    serializeJsonPretty(doc, Serial);  //output results

    if (error) {
      Serial.println("json parseObject() failed");
      Serial.println("bad json: " + jsonWeather);
      Serial.println("json parseObject() failed");
    } else {
      JsonObject main = doc["main"];
      float main_temp = main["temp"];  // 2.44
      float main_feels_like = main["feels_like"];
      int main_humidity = main["humidity"];  // 89

      Serial.println("JSON OUTPUT: ");
      Serial.print("Temp: ");
      Serial.println(main_temp);
      Serial.print("Humidity: ");
      Serial.println(main_humidity);
      Serial.print("Feels like: ");
      Serial.println(main_humidity);

      temp = main_temp;
      feels_like = main_feels_like;
      humidity = main_humidity;
    }
  } else {
    Serial.println("Error retrieving URL");
  }
}

void drawWeather(String &temp, String &feels_like, String &humidity) {
  tft.fillScreen(TFT_BLACK);

  tft.setCursor(30, 60, 2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  tft.println("Temperature: " + temp + "C");

  tft.setCursor(30, 100, 2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  tft.println("Feels like: " + feels_like + "C");

  tft.setCursor(30, 140, 2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  tft.println("Humidity: " + humidity + "%");
}

void ledControl() {
  if (touchRead(33) < threshold) {
    delay(1000);
    if (touchRead(33) < threshold) {
      hold = true;
    } else {
      tap = true;
    }
  }

  if (tap == true) {  // cycle through colours
    Serial.println("tap");
    //touchPin = touchRead(33);
    if (touchCount == 0) {
      //Serial.println("Lights ON");
      lightsOn();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 1) {  // blue
      r = 250;
      g = 110;
      b = 110;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      Serial.println("blue");
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 2) {  // light pink
      r = 201;
      g = 118;
      b = 222;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      Serial.println("pink");
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 3) {
      r = 215;
      g = 137;
      b = 250;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 4) {
      r = 5;
      g = 71;
      b = 8;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 5) {
      r = 176;
      g = 130;
      b = 44;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 6) {
      r = 245;
      g = 149;
      b = 49;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 7) {
      r = 86;
      g = 184;
      b = 186;
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(500);
      touchCount += 1;
    } else if (touchCount == 8) {
      Serial.println("Lights OFF");
      lightsOff();
      delay(500);
      touchCount = 0;
    }
    tap = false;
  }
  else if (hold == true && increase == true) {  // increase brightness
    while (touchRead(33) < threshold && brightness < 255) {
      brightness += 5;
      //brightness += 20;
      FastLED.setBrightness(brightness);
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(100);
      Serial.println(brightness);
    }
    increase = false;
    hold = false;
  }
  else if (hold == true && increase == false) {
    while (touchRead(33) < threshold && brightness > 10) {
      brightness -= 5;
      //brightness -= 20;
      FastLED.setBrightness(brightness);
      fill_solid(leds, NUM_LEDS, CRGB(r, g, b));
      FastLED.show();
      delay(100);
      Serial.println(brightness);
    }
    increase = true;
    hold = false;
  }
}

void lightsOn() {
  FastLED.setBrightness(brightness);        //32
  fill_solid(leds, NUM_LEDS, CRGB::White);  // fill red
  FastLED.show();
}

void lightsOff() {
  FastLED.setBrightness(brightness);
  fill_solid(leds, NUM_LEDS, CRGB::Black);  // fill red
  FastLED.show();
}
